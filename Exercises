# Part 1: Essentials


def business_ids_count():
    """
    Write a SQL query that finds the number of business ids in the businesses table
    :return: a string representing the SQL query
    :rtype: str
    """
    ids_count = "SELECT COUNT(business_id) FROM businesses;"
    return ids_count


def unique_business_names_count():
    """
    Write a SQL query that finds out how many unique business names are registered
    with San Francisco Food health investigation organization
    and name the column as unique restaurant name count.
    :return: a string representing the SQL query
    :rtype: str
    """
    names_count = """SELECT COUNT(DISTINCT name) AS 'unique restaurant name count' FROM businesses;"""
    return names_count


def first_and_last_investigation():
    """
    Write a SQL query that finds out what is the earliest and latest date
    a health investigation is recorded in this database.
    :return: a string representing the SQL query
    :rtype: str
    """
    first_last = "SELECT MIN(application_date), MAX(application_date) FROM businesses;"
    return first_last


def business_local_owner_count():
    """
    How many businesses are there in San Francisco where their owners live
    in the same area (postal code/ zip code) as the business is located?
    :return: a string representing the SQL query
    :rtype: str
    """
    local_owner = "SELECT COUNT(postal_code) FROM businesses WHERE(postal_code = owner_zip);"
    return local_owner


def business_local_owner_reg_count():
    """
    Out of those businesses, how many of them has a registered business certificate?
    :return: a string representing the SQL query
    :rtype: str
    """
    local_owner_reg = "SELECT COUNT(business_certificate) FROM businesses;"
    return local_owner_reg




# Part 2: GROUP BY


def freq_risk_per_violation():
    """
    Find out the distribution of the risk exposure of all the violations reported in the database
    The first column of the result should 'risk_category' and the second column the count.
    :return: a string representing the SQL query
    :rtype: str
    """
    violation = "SELECT risk_category, COUNT(ViolationTypeID)" \
                "FROM violations GROUP BY risk_category;"
    return violation


def freq_risk_per_violation_water():
    """
    Find out the distribution of the risk exposure of all the violations reported in the database
    that are *water related*. Sort them by frequency from high to low.
    :return: a string representing the SQL query
    :rtype: str
    """
    freq_risk = "SELECT risk_category, COUNT(ViolationTypeID) " \
                "FROM violations WHERE description LIKE '%water%' GROUP BY risk_category " \
                "ORDER BY risk_category ASC;"
    return freq_risk


def frequency_of_inspections_types():
    """
    What types of inspections does the authorities conduct and how often do they occur in general.
    Calculate the distribution of different types of inspections with their frequency (type, frequency)
    based on inspections records. Sort them in ascending order based on frequency.
    :return: a string representing the SQL query
    :rtype: str
    """
    frequency_inspections = "SELECT type, COUNT(date)" \
                            "FROM inspections GROUP BY type;"
    return frequency_inspections


def avg_score_by_inspection_type():
    """
    What is the average score given to restaurants based on the type of inspection?
    Based on the results, identify the types of inspections that are not scored (NULL)
    and remove those categories from the resultset. The 'average_score' should be rounded
    to one decimal. Sort the results in ascending order based on the average score.
    Hint: use the function ROUND(score, 1)
    :return: a string representing the SQL query
    :rtype: str
    """
    avg_score = "SELECT type, ROUND(AVG(Score),1) as 'average_score' " \
                "FROM inspections GROUP BY type HAVING AVG(Score) IS NOT NULL;"
    return avg_score


def owner_per_restaurant_count():
    """
    Find the restaurant owners (owner_name) that own one or multiple restaurants in the city
    with the number of restaurants (num_restaurants) they own.
    Find the first top 10 owners ordered by descending order using the number of restaurants.
    :return: a string representing the SQL query
    :rtype: str
    """
    owner_per_restaurant = "SELECT owner_name, COUNT(name) AS 'num_restaurants' " \
                           "FROM businesses GROUP BY owner_name HAVING owner_name IS NOT NULL " \
                           "ORDER BY COUNT(DISTINCT name) DESC LIMIT 10;"
    return owner_per_restaurant
